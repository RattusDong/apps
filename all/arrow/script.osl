// asset urls
string player_eye = "w 2 c #000 dot -8 0 w 1 square -8 0 1 1 c #777 w 1 line 5 3.5 -4 11 cont -9 12 cont -8 13.5 cont 0 13 w 3 line 6 5 -3 12 w 2 cont -7.5 13 w 1 line 5 -3.5 -4 -11 cont -9 -12 cont -8 -13.5 cont 0 -13 w 3 line 6 -5 -3 -12 w 2 cont -7.5 -13 c #666 w 1 line 5 12.5 -4 17.4 cont -6 16 cont -1 13 cont 5 3.5 cont 7 4 w 3 line 6 5 1 13 w 2 cont -4.2 16 w 1 line 5 -12.5 -4 -17.4 cont -6 -16 cont -1 -13 cont 5 -3.5 cont 7 -4 w 3 line 6 -5 1 -13 w 2 cont -4.2 -16 c #444 w 1 line 9.5 3 6 15 cont 1 19 cont -1 18.5 cont 2.5 15 cont 6 4 cont 9.5 3 w 3 line 7.6 4.6 4 15 w 2 cont 0.5 18 w 1 line 9.5 -3 6 -15 cont 1 -19 cont -1 -18.5 cont 2.5 -15 cont 6 -4 cont 9.5 -3 w 3 line 7.6 -4.6 4 -15 w 2 cont 0.5 -18"

string arrow_base = "w 0.5 line -4 0 4.5 0 w 0.2 line 3.9 0.6 5 0 cont 3.9 -0.6 w 0.3 c #444 line 3.5 0.6 4.7 0 cont 3.5 -0.6 w 0.3 c #777 line -4.6 0.6 -4.3 0.5 cont -3.7 0 cont -4.3 -0.5 cont -4.5 -0.6 w 0.3 c #444 line -4.8 0.6 -4.5 0.5 cont -3.9 0 cont -4.5 -0.5 cont -4.8 -0.6 w 0.2 line -4.9 0 4.5 0"

string player_body = "c #578dc1 w 1 square 0 0 8 8 w 2 square 0 0 7 7 c #fff w 1 square 0 0 6.5 6.5 w 3 square 0 0 5 5 square 0 0 4 4 w 13 dot 0 0"
string white_square = "w 20 dot 0 0"
string arrow_main = "c #444" + arrow_base
string arrow_charged = "c #578dc1" + arrow_base
string enemy_body = "c #666 w 1 line 0 9.5 9.5 0 cont 0 -9.5 cont -9.5 0 cont 0 9.5 w 4 line -7 0 7 0 w 6 line -5 0 5 0 c #888 w 1 line -7.5 3.5 0 11 cont 7.5 3.5 cont 4 0 cont 7.5 -3.5 cont 0 -11 cont -7.5 -3.5 cont -4 0 cont -7.5 3.5 w 4 line -5 3.5 5 3.5 line -5 -3.5 5 -3.5 line 0 8.5 0 -8.5 w 10.5 dot 0 3.7 dot 0 -3.7 c #fff w 1 line 0 5 5 0 cont 0 -5 cont -5 0 cont 0 5 w 3 line 0 3 3 0 cont 0 -3 cont -3 0 cont 0 3 w 8 dot 0 0 c #000 w 1 line 0 2.5 2.5 0 cont 0 -2.5 cont -2.5 0 cont 0 2.5 w 4 dot 0 0"
string map_main = "w 1.7 c #666 cutcircle 0 0 14 0 180 w 1.2 c #777 cutcircle 0 0 14 0 180 w 0.7 c #999 cutcircle 0 0 14 0 180"

string crosshair = "w 3 line 7 7 10 10 line -7 7 -10 10 line -7 -7 -10 -10 line 7 -7 10 -10"

array gamepads = getGamepads()

if gamepads.len > 0 (
  gamepad @= gamepads[1]
  say "Gamepad mode enabled"
)

number start_timer = timer
number last_timer = timer
number game_timer = timer

object abilities = {}
object ability = {}

object io = {
  x_vel: 0,
  y_vel: 0,
  ability: def() -> (
    // left trigger
    return "space".onKeyDown() or gamepad.buttons[7]["pressed"]
  ),
  down: def() -> (
    // right trigger
    if timer - start_timer < 0.5 (
      return false
    )
    return gamepads.len > 0 ? gamepad.buttons[8]["pressed"] mouse_down
  ),
  x: def() -> (
    if gamepads.len > 0 (
      self.x_vel += gamepad.axes[2].x * window.width / 4 - self.x_vel / 10
      return self.x_vel
    )
    return mouse_x
  ),
  y: def() -> (
    if gamepads.len > 0 (
      self.y_vel += gamepad.axes[2].y * window.width / 4 - self.y_vel / 10
      return self.y_vel
    )
    return mouse_y
  ),
  move_x: def(number speed) -> (
    return (gamepads.len > 0 ? gamepad.axes[1].x ("d".isKeyDown().toNum() - "a".isKeyDown().toNum())) * speed
  ),
  move_y: def(number speed) -> (
    return (gamepads.len > 0 ? -gamepad.axes[1].y ("s".isKeyDown().toNum() - "w".isKeyDown().toNum())) * speed
  ),
  haptic: def(string option) -> (
    local configs = {
      weakest: {
        duration: 100,
        weakMagnitude: 0.05,
        strongMagnitude: 0.05,
      },
      weaker: {
        duration: 100,
        weakMagnitude: 0.1,
        strongMagnitude: 0.1,
      },
      weak: {
        duration: 100,
        weakMagnitude: 0.2,
        strongMagnitude: 0.2,
      },
      strong: {
        duration: 100,
        weakMagnitude: 1.0,
        strongMagnitude: 1.0
      }
    }
    
    if gamepads.len > 0 (
      void gamepad.haptic(configs[option])
    )
  ),
  select1: def() -> (
    // left button right controller
    return "1".isKeyDown() or gamepad.buttons[3]["pressed"]
  ),
  select2: def() -> (
    // top button right controller
    return "2".isKeyDown() or gamepad.buttons[4]["pressed"]
  ),
  select3: def() -> (
    // right button right controller
    return "3".isKeyDown() or gamepad.buttons[2]["pressed"]
  )
}

def generateStars(number density, string c) (
  local stars = "w 0.1 c " ++ c

  local dist = 10
  loop density (
    local dir = random(-180,180)
    dist = random(10,200).round() / 10
    local x = dir.sin() * dist
    local y = dir.cos() * dist
    stars ++= " dot" + x + y
  )
  return stars
)

string stars = generateStars(100, "#777")
string stars2 = generateStars(100, "#555")
string stars3 = generateStars(100, "#333")

string rings = "w 0.1 c #999"
for i 3 (
  for i2 36 (
    dir = i2 * 10
    rings ++= " dot" + x + y
  )
)

// the queue to handle loading images

window.framerate = 60

array load_queue = []

number dir_x = 0
number dir_y = 0

// a command to simply add urls to the load_queue
def "load" "url" (
  load_queue.append(url)
)

object player = {}

array notifs = []
number notif_y = 20


array enemies = []
array arrows = []
array bullets = []
array particles = []

// setup the max number of each thing that can exist
number enemy_cap = 40
number arrow_cap = 10
number particle_cap = 50
number bullet_cap = 1000

number current_wave = 0

// this command is run to reset the game
def "setup" (
  // setup the player object
  
  player = {
    "x": 0,
    "y": 0,
    "xvel": 0,
    "yvel": 0,
    "health": 10,
    "speed": 1,
    "drawspeed": 500,
    "died": false,
  }
  
  notifs = []
  notif_y = 20

  // handle the arrow pullback charge feature
  mouse_down_start = game_timer
  
  // wave timer and text notification data
  current_wave = 0
  wave_popup = {
    "y": 60
  }
  wave_popup.time = game_timer
  
  // a flag variable that controls the white flash when the player gets hit
  damaged = game_timer - 2

  // the arrays of each item to be rendered
  arrows = []
  enemies = []
  particles = []
  bullets = []
  upgrade_mode = false
  
  abilities @= {
    "Dash":{
      "name":"Dash",
      "cooldown":0.5,
      "last_used":0
    },
    "Ghost":{
      "name":"Ghost",
      "cooldown":10,
      "last_used":0
    },
    "Gunner":{
      "name":"Gunner",
      "cooldown":10,
      "last_used":0
    },
    "Healer":{
      "name":"Healer",
      "cooldown":5,
      "last_used":0
    }
  }
  
  ability @= {}
)

// run the setup
setup

// 'move steps' block from scratch recreation
def "move" "dist" (
  change direction.sin() * dist direction.cos() * dist
)

// add an arrow object to the scene
def "create_arrow" "x, y, dir, vel" (
  if arrows.len > arrow_cap (
    void arrows.delete(1)
  )
  
  void arrows.append({
    "x":   x + (dir.sin() * vel * 2),
    "y":   y + (dir.cos() * vel * 2),
    "vel": vel,
    "dir": dir,
  })
)

// generate the positon from x y to world space
def position_entity(x, y) (
  return {
    "x": player.x - x * s * -1,
    "y": player.y - y * s * -1,
  }
)

// add an enemy object to the scene
def "create_enemy" "x, y, health, reload" (
  // delete enemies if the total number exceeds the cap
  if enemies.len > enemy_cap (
    void enemies.delete(1)
  )
  
  void enemies.append(this ++ {
    "dir": 0,
    "vel": 3,
    "size": 1,
    "last": game_timer + (random(10,30) / 10)
  })
)

// add an enemy bullet object to the scene
def "create_bullet" "x, y, dir, vel" (
  if bullets.len > bullet_cap (
    void bullets.delete(1)
  )
  void bullets.append(this)
)

// add a simple particle object to the scene
def "create_particle" "x, y, dir, costume" (
  if particles.len > particle_cap (
    void particles.delete(1)
  )
  
  void particles.append(this ++ {
    "frames": 0
  })
)

// a command to handle simple character controlling with wasd and space for dashing
def "movement" "speed" (
  player.xvel += io.move_x(speed)
  player.yvel -= io.move_y(speed)
  
  goto 0 0
  pointat player.xvel player.yvel
  player.dir = direction
  if io.ability() (
    if !boosted and (game_timer - ability.last_used > ability.cooldown) (
      switch ability.name (
        case "Dash"
          move_player 200
          break
      )
      boosted = true
      ability.last_used = game_timer
    )
  ) else (
    boosted = false
  )
  player.x += player.xvel
  player.y += player.yvel
  player.xvel *= 0.8
  player.yvel *= 0.8
  
  local d = dist(0,0,player.x,player.y) - 1730
  if d > 0 (
    pointat -player.x -player.y
    player.x += direction.sin() * d
    player.y += direction.cos() * d
  )
)

// add velocity to the player in the direction its facing
def "move_player" "sp" (
  number speed = sp
  player.xvel += player.dir.sin() * speed
  player.yvel += player.dir.cos() * speed
)

def "create_random_enemy" "level" (
  if typeof(level) != "number" (
    error "level must be a number, got: " ++ level
  )
  goto player.x player.y
  direction random(-180,180)
  create_enemy direction.sin() * random(300,2000) direction.cos() * random(300,2000) level level
)

def "go" "x, y" (
  number vx = x
  number vy = y
  goto vx + cam_x vy + cam_y
)

def "apply_upgrade" "upgrade" (
  switch upgrade (
    case "Faster Movement"
      player.speed += 0.5
      break
    case "Faster Reload"
      player.drawspeed *= 1.5
      break
    case "Refill Health"
      player.health = 10
      break
  )
)


object renderer = {
  drawPlayer: def() -> (
    icon player_body 2.3 * s
    pointat io.x() io.y()
    move 40 * s
    icon player_eye 4.7 * s
    move 30 * s
    move -30 * s
  )
}

number per = 0
number s = 0.7
s_target = 0.5

number cam_x = 0
number cam_y = 0

boolean paused = false

number cycles = 0

def addLine(dir) (
  return "line" + (dir.sin() * 60 + 3) + (dir.cos() * 60 + 3) + (dir.sin() * 120 + 3) + (dir.cos() * 120 + 3)
)

ability_sel_icn = "w 3"
ability_sel_icn += addLine(0)
ability_sel_icn += addLine(360 / abilities.len)
ability_sel_icn += "cont 123 123 cont 3 123 cutcircle 3 3 60" + (18 / abilities.len) + (180 / abilities.len)

number.wrap @= def(low, high) -> (
  return ((self - low) % (high - low + 1) + (high - low + 1)) % (high - low + 1) + low
)

boolean can = !mouse_down

number temp_fps = 0
number last_fps = timestamp

mainloop:

cycles ++
temp_fps ++
if timestamp - last_fps > 1000 (
  fps = temp_fps
  temp_fps = 0
  last_fps = timestamp
)

array gamepads @= getGamepads()

if gamepads.len > 0 (
  gamepad @= gamepads[1]
)

s += s_target - s / 5

c #fff
direction 90

if current_wave == 0 and ability.name == null (
  goto 0 window.top - 20
  centext "Pick your ability\n\n" 10
  
  goto 0 0
  square 0 0 150
  c #050505
  square 0 0 140
  renderer.drawPlayer()
  
  goto 0 0
  pointat io.x() io.y()
  mouse_dir = direction + 45
  
  direction -90
  
  goto 0 0
  c #fff
  cha = 360 / abilities.len
  goto 0 0
  for i abilities.len (
    dir = mouse_dir - direction
    high = direction + (cha / 2)
    low = direction - (cha / 2)
    icn_s = 1.5
    cur_ability = abilities.getKeys()[i]
    if mouse_dir > low and mouse_dir < high (
      icn_s = 1.7
      if io.down() (
        ability = abilities[cur_ability]
        ability.last_used = game_timer
        exit
      )
    )
    icon ability_sel_icn icn_s : c#fff
    pos = { direction }
    
    local dir = pos.direction - 45
    change dir.sin() * 170 dir.cos() * 170
    turnright 45
    move cur_ability.len * -5
    text cur_ability 10
    
    goto 0 0
    direction pos.direction
    turnright cha
  )
  direction 90
 
  can = !mouse_down
  import "win-buttons"
  exit
)

if player.died (
  goto 0 0
  centext "You Died, press 'click or trigger' to continue" 30 : c#fff
  if io.down() (
    player.died = false
  )
  can = !mouse_down
  import "win-buttons"
  exit
)

if game_timer > (particle_timer + 0.02) and !paused (
  goto random(-100,100) random(-100,100)
  pointat 0 0
  create_particle player.x + x_position player.y + y_position direction white_square
  particle_timer = game_timer
)

w @= window

if !paused (
  movement player.speed
  game_timer += timer - last_timer
)
last_timer = timer

cam_x += io.x() / -5 - cam_x / 10
cam_y += io.y() / -5 - cam_y / 10
frame w.left * 2 + cam_x w.top * 2 + cam_y w.right * 2 + cam_x w.bottom * 2 + cam_y

number x = player.x
number y = player.y
direction 90
goto x * -s y * -s
icon stars 100
goto x / 1.5 * -s y / 1.5 * -s
icon stars2 100wa
goto x / 2 * -s y / 2 * -s
icon stars3 100


for i particles.len (
  particle @= particles[i]
  pos = position_entity(particle.x, particle.y)
  goto pos.x pos.y
  direction particle.dir
  c #888
  pen "opacity" 100 - (particle.frames * 5)
  icon particle.costume s s
  if !paused (
    particle.frames ++
    particle.x += particle.dir.sin() * s * -3
    particle.y += particle.dir.cos() * s * -3
    if particle.frames > 20 (
      particles.delete(i)
      i --
    )
  )
)
effect "clear"

goto 0 0
pointat player.xvel player.yvel
s_target = 0.8
if game_timer - damaged < 0.3 (
  if game_timer - damaged < 0.1 (
    s_target = 0.6
  )
  effect "brightness" 100
)

player.damage_multiplier = 1
if !paused (
  if game_timer - ability.last_used < ability.cooldown / 2 (
    if ability.name == "Ghost" or ability.name == "Dash" (
      pen "opacity" 50
      player.damage_multiplier = 0
    )
    if ability.name == "Gunner" and cycles % 5 == 0 (
      per = 1
    )
    if ability.name == "Healer" (
      player.health += 0.01
    )
  )
)
renderer.drawPlayer()

if !paused (
  if io.down() (
    draw = game_timer - mouse_down_start * player.drawspeed
    dif = draw.clamp(0,300)
    per = dif / 300
    move 70 - (dif / 10) * s
    if draw > 2 (
      icon per == 1 ? arrow_charged arrow_main 8 * s
    )
    arrow_charging = true
  ) else (
    if per * 11 > 8 (
      void io.haptic("weak")
      create_arrow player.x player.y direction per * 33
    )
    per = 0
    mouse_down_start = game_timer
  )
)

turnleft 180
player.aim = direction

// arrows
arrows_del = []
for i arrows.len (
  arrow @= arrows[i]
  if !paused (
    arrow.x += arrow.dir.sin() * arrow.vel
    arrow.y += arrow.dir.cos() * arrow.vel
  )
  direction arrow.dir
  pos = position_entity(arrow.x,arrow.y)
  goto pos.x pos.y
  if dist(x_position,y_position,0,0) > (1500 * s) (
    arrows_del.append(i)
  )
  icon arrow_main 8 * s
)
offset = 0
each i arrows_del (
  arrows.delete(i - offset)
  offset ++
)

// bullets
bullets_del = []
for i bullets.len (
  bullet @= bullets[i]
  if !paused (
    bullet.x += bullet.dir.sin() * bullet.vel
    bullet.y += bullet.dir.cos() * bullet.vel
  )
  direction bullet.dir
  pos = position_entity(bullet.x, bullet.y)
  goto pos.x pos.y
  dist2 = dist(x_position,y_position,0,0)
  if dist2 > (2000 * s) (
    bullets_del.append(i)
  )
  if dist2 < (30 * s) and player.damage_multiplier != 0 (
    bullets_del.append(i)
    void io.haptic("strong")
    player.health -= player.damage_multiplier
    damaged = game_timer
  )
  icon "c #fff w 7 square 0 0 5 3" 2 * s
)
offset = 0
each i bullets_del (
  bullets.delete(i - offset)
  offset ++
)

dist2 = 50 * s

// enemies
enemies_del = []
for i enemies.len (
  enemy @= enemies[i]
  local x = player.x - enemy.x * -s
  local y = player.y - enemy.y * -s
  log "x" x "y" y "px" player.x "py" player.y "ex" enemy.x "ey" enemy.y "s" s
  goto x y
  dist00 = dist(0,0,x,y).abs()
  pointat random(-100,100) random(-100,100)
  
  if dist00 < (2000 * s) (
    if !paused (
      if game_timer - enemy.last > 2 / enemy.reload (
        create_bullet player.x + (x / s) player.y + (y / s) direction + random(-5,5) 20
        enemy.last = game_timer
      )
      if dist00 > (300 * s) and dist2 < (500 * s) (
        enemy.x += direction.sin() * enemy.vel
        enemy.y += direction.cos() * enemy.vel
      ) else (
        if dist00 < dist2 (
          move_player -100
          void io.haptic("strong")
          damaged = game_timer - 0.3
          player.health -= 0.5
          void enemies_del.append(i)
        )
      )
      for i2 arrows.len (
        arrow @= arrows[i2]
        pos = position_entity(arrow.x,arrow.y)
        if dist(pos.x, pos.y, x, y).abs() < dist2 (
          void enemies_del.append(i)
          void arrows.delete(i2)
          loop 5 (
            direction random(-180,180)
            create_particle player.x + (x / s) player.y + (y / s) direction white_square
          )
        )
      )
    )
    direction 90
    icon enemy_body 4 * s * enemy.size
  )
)

offset = 0
each i enemies_del (
  enemy = enemies[i - offset]
  goto player.x - enemy.x * -s player.y - enemy.y * -s
  x = x_position
  y = y_position
  
  loop 5 (
    direction random(-180,180)
    create_particle player.x + (x / s) player.y + (y / s) direction white_square
  )

  void enemies.delete(i - offset)
  void notifs.insert(1,{
    "txt":  "Enemy Killed",
    "time": timer
  })

  notif_y = 0
  offset ++
)

direction 90
goto -player.x * s -player.y * s
icon map_main 135 * s
frame "clear"


player.health = player.health.clamp(0,10)

goto 0 window.bottom + 30
c #333
bar 400 0 20 player.health / 10 #fff

goto 0 window.bottom + 55
c #333
bar 200 0 15 (game_timer - ability.last_used / ability.cooldown).clamp(0,1) #fff

if player.health == 0 (
  setup
  player.died = true
)

if enemies.len == 0 (
  if current_wave % 5 == 0 (
    create_random_enemy 2
  )

  current_wave ++
  loop ceil(current_wave * 1.5) (
    create_random_enemy 1
  )
  wave_popup.time = timer
  player.health ++
  if current_wave > 1 (
    upgrade_mode = true
    paused = true
  )
)

if timer - wave_popup.time < 10 (
  wave_text = "Wave" + current_wave
  goto wave_text.len * -15 window.top + wave_popup.y
  if timer - wave_popup.time < 4 (
    wave_popup.y += -40 - wave_popup.y / 10
  )
  text wave_text 30 : c#fff
)

c #fff

direction 90

if upgrade_mode (
  loc 2 2 20 -20
  text "Pick an upgrade to continue to the next wave\n\n" 10
    
  array upgrades = [
    "Faster Movement",
    "Faster Reload",
    "Refill Health"
  ]
  
  each i upgrade upgrades (
    text "Press " ++ i ++ " To Upgrade: " ++ upgrade ++ "\n" 10
    if io["select" ++ i]() (
      apply_upgrade upgrade
      upgrade_mode = false
      paused = false
      exit
    )
  )
) else (
  loc 2 2 10 notif_y
  each i notif notifs (
    set_x window.left + 10
    time = timer - notif.time
    pen "opacity" time > 2 ? 100 - (time - 2 * 100) 100
    text notif.txt 10
    if timer - notif.time > 3 (
      void notifs.delete(i)
      i --
    )
    change_y -20
  )
  notif_y += -20 - notif_y / 10
)

c #fff
loc 2 -2 10 20
text bullets.len + enemies.len + particles.len + arrows.len + "Objects / " ++ fps + "Fps / Game Timer" + game_timer 10

can = !mouse_down

import "win-buttons"
